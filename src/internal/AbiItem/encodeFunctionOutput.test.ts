import { AbiItem } from 'ox'
import { expect, test } from 'vitest'

test('default', () => {
  const abiItem = AbiItem.from(
    'function test() returns (uint a, (uint x, string y) b)',
  )
  const output = [420n, { x: 420n, y: 'lol' }] as const
  const result = AbiItem.encodeFunctionOutput(abiItem, output)
  expect(AbiItem.decodeFunctionOutput(abiItem, result)).toEqual(output)
  expect(result).toMatchInlineSnapshot(
    `"0x00000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000036c6f6c0000000000000000000000000000000000000000000000000000000000"`,
  )
})

test('behavior: single param', () => {
  const abiItem = AbiItem.from('function test() returns ((uint x, string y) b)')
  const output = { x: 420n, y: 'lol' } as const
  const result = AbiItem.encodeFunctionOutput(abiItem, output)
  expect(AbiItem.decodeFunctionOutput(abiItem, result)).toEqual(output)
  expect(result).toMatchInlineSnapshot(
    `"0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000036c6f6c0000000000000000000000000000000000000000000000000000000000"`,
  )
})

test('options: as = Object', () => {
  const abiItem = AbiItem.from(
    'function test() returns (uint a, (uint x, string y) b)',
  )
  const output = { a: 420n, b: { x: 420n, y: 'lol' } } as const
  const result = AbiItem.encodeFunctionOutput(abiItem, output, { as: 'Object' })
  expect(
    AbiItem.decodeFunctionOutput(abiItem, result, { as: 'Object' }),
  ).toEqual(output)
  expect(result).toMatchInlineSnapshot(
    `"0x00000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000036c6f6c0000000000000000000000000000000000000000000000000000000000"`,
  )
})

test('options: as = Object, behavior: single param', () => {
  const abiItem = AbiItem.from('function test() returns ((uint x, string y) b)')
  const output = { x: 420n, y: 'lol' } as const
  const result = AbiItem.encodeFunctionOutput(abiItem, output, { as: 'Object' })
  expect(
    AbiItem.decodeFunctionOutput(abiItem, result, { as: 'Object' }),
  ).toEqual(output)
  expect(result).toMatchInlineSnapshot(
    `"0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000036c6f6c0000000000000000000000000000000000000000000000000000000000"`,
  )
})
